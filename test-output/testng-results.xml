<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="4" passed="3" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2024-01-15T12:31:05 IST" name="Suite" finished-at="2024-01-15T12:33:25 IST" duration-ms="139999">
    <groups>
    </groups>
    <test started-at="2024-01-15T12:31:05 IST" name="Test" finished-at="2024-01-15T12:33:25 IST" duration-ms="139999">
      <class name="TestFolders.AndroidFlow">
        <test-method is-config="true" signature="StartServer()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:24 IST" name="StartServer" finished-at="2024-01-15T12:31:25 IST" duration-ms="1319" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartServer -->
        <test-method is-config="true" signature="initiateDriver()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:25 IST" name="initiateDriver" finished-at="2024-01-15T12:31:32 IST" duration-ms="6605" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initiateDriver -->
        <test-method signature="fillForm_ErrorValidation()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:32 IST" name="fillForm_ErrorValidation" finished-at="2024-01-15T12:31:42 IST" duration-ms="10422" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected:<Please enter your name> but was:<Pleasse enter your name>]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected:<Please enter your name> but was:<Pleasse enter your name>
at org.testng.AssertJUnit.assertEquals(AssertJUnit.java:115)
at org.testng.AssertJUnit.assertEquals(AssertJUnit.java:125)
at TestFolders.AndroidFlow.fillForm_ErrorValidation(AndroidFlow.java:32)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.invokers.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:139)
at org.testng.internal.invokers.TestInvoker.invokeMethod(TestInvoker.java:664)
at org.testng.internal.invokers.TestInvoker.invokeTestMethod(TestInvoker.java:227)
at org.testng.internal.invokers.MethodRunner.runInSequence(MethodRunner.java:50)
at org.testng.internal.invokers.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:957)
at org.testng.internal.invokers.TestInvoker.invokeTestMethods(TestInvoker.java:200)
at org.testng.internal.invokers.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:148)
at org.testng.internal.invokers.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:848)
at org.testng.TestRunner.run(TestRunner.java:621)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:443)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:437)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:397)
at org.testng.SuiteRunner.run(SuiteRunner.java:336)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:95)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1280)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1200)
at org.testng.TestNG.runSuites(TestNG.java:1114)
at org.testng.TestNG.run(TestNG.java:1082)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillForm_ErrorValidation -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:43 IST" name="tearDown" finished-at="2024-01-15T12:31:43 IST" duration-ms="278" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initiateDriver()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:44 IST" name="initiateDriver" finished-at="2024-01-15T12:31:52 IST" duration-ms="8213" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initiateDriver -->
        <test-method signature="fillForm_PositiveFlow(java.util.HashMap)[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:31:52 IST" name="fillForm_PositiveFlow" data-provider="getData" finished-at="2024-01-15T12:32:46 IST" duration-ms="53750" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Product_1=Air Jordan 9 Retro, Country=India, Product_2=PG 3, Gender=Male, Name=Anubhav Gupta}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillForm_PositiveFlow -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:32:46 IST" name="tearDown" finished-at="2024-01-15T12:32:46 IST" duration-ms="344" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="initiateDriver()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:32:46 IST" name="initiateDriver" finished-at="2024-01-15T12:32:51 IST" duration-ms="5309" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initiateDriver -->
        <test-method signature="fillForm_PositiveFlow(java.util.HashMap)[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:32:51 IST" name="fillForm_PositiveFlow" data-provider="getData" finished-at="2024-01-15T12:33:21 IST" duration-ms="29529" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[{Product_1=Air Jordan 4 Retro, Country=Australia, Product_2=PG 3, Gender=Female, Name=Deepanshi Garg}]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- fillForm_PositiveFlow -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:33:21 IST" name="tearDown" finished-at="2024-01-15T12:33:21 IST" duration-ms="350" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="stopServer()[pri:0, instance:TestFolders.AndroidFlow@2dfaea86]" started-at="2024-01-15T12:33:21 IST" name="stopServer" finished-at="2024-01-15T12:33:25 IST" duration-ms="3496" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stopServer -->
      </class> <!-- TestFolders.AndroidFlow -->
      <class name="TestFolders.IOSFlow">
        <test-method is-config="true" signature="StartServer()[pri:0, instance:TestFolders.IOSFlow@5b7a7f33]" started-at="2024-01-15T12:31:05 IST" name="StartServer" finished-at="2024-01-15T12:31:07 IST" duration-ms="1725" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- StartServer -->
        <test-method is-config="true" signature="initiateDriver()[pri:0, instance:TestFolders.IOSFlow@5b7a7f33]" started-at="2024-01-15T12:31:07 IST" name="initiateDriver" finished-at="2024-01-15T12:31:14 IST" duration-ms="7673" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- initiateDriver -->
        <test-method signature="Test()[pri:0, instance:TestFolders.IOSFlow@5b7a7f33]" started-at="2024-01-15T12:31:14 IST" name="Test" finished-at="2024-01-15T12:31:17 IST" duration-ms="3188" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- Test -->
        <test-method is-config="true" signature="tearDown()[pri:0, instance:TestFolders.IOSFlow@5b7a7f33]" started-at="2024-01-15T12:31:17 IST" name="tearDown" finished-at="2024-01-15T12:31:18 IST" duration-ms="1089" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDown -->
        <test-method is-config="true" signature="stopServer()[pri:0, instance:TestFolders.IOSFlow@5b7a7f33]" started-at="2024-01-15T12:31:18 IST" name="stopServer" finished-at="2024-01-15T12:31:24 IST" duration-ms="5653" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- stopServer -->
      </class> <!-- TestFolders.IOSFlow -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
